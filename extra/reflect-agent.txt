# reflective_agent.py

from autogen import AssistantAgent

# ── Ollama config ──────────────────────────────────────────────
llm_config = {
    "config_list": [
        {
            "model": "llama3.2",
            "base_url": "http://localhost:11434/v1",
            "api_type": "ollama",
        }
    ],
    "temperature": 0.0,
}

# ── Agents ─────────────────────────────────────────────────────
code_writer = AssistantAgent(
    name="code_writer",
    llm_config=llm_config,
    system_message="You write Python code. Output ONLY code, no explanations.",
)

critic = AssistantAgent(
    name="critic",
    llm_config=llm_config,
    system_message=(
        "You are a Python code reviewer.\n"
        "Respond only with:\n"
        "- 'PASS' if the code meets the request\n"
        "- or 'FAIL: <brief reason>' if it does not."
    ),
)

fixer = AssistantAgent(
    name="fixer",
    llm_config=llm_config,
    system_message="You fix Python code based on critique. Return ONLY fixed code.",
)

# ── Main logic ─────────────────────────────────────────────────
def main():
    print("Reflective Agent (Ollama)")
    task = input("Enter a Python code request: ").strip()

    # Step 1: Generate initial code
    messages = [{"role": "user", "content": task}]
    print("\nGenerating code...")
    code = code_writer.generate_reply(messages)["content"]
    print("\n--- Code ---\n", code)

    # Step 2: Critique the code
    print("\nCritiquing code...")
    critique_input = f"Original request:\n{task}\n\nCode:\n{code}"
    critique = critic.generate_reply([{"role": "user", "content": critique_input}])["content"]
    print("\n--- Critique ---\n", critique)

    # Step 3: If failed, fix the code
    if critique.strip().lower().startswith("fail"):
        print("\nFixing code...")
        fix_input = (
            f"Original request:\n{task}\n\n"
            f"Original code:\n{code}\n\n"
            f"Critique:\n{critique}"
        )
        fixed_code = fixer.generate_reply([{"role": "user", "content": fix_input}])["content"]
        print("\n--- Fixed Code ---\n", fixed_code)
    else:
        print("\nOriginal code passed review.")

if __name__ == "__main__":
    main()
